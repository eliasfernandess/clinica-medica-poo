/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.imepac.administrativo.telas;

import br.edu.imepac.administrativo.telas.C.TelaLobby;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elias
 */
public class ListagemPaciente extends javax.swing.JFrame {

    /**
     * Creates new form ListagemConvenio
     */
    public ListagemPaciente() {
    initComponents();
    setLocationRelativeTo(null);
    carregarDados(); // Carrega os dados no início
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaP = new javax.swing.JTable();
        BttEditar = new javax.swing.JButton();
        BttSalvar = new javax.swing.JButton();
        BttExcluir = new javax.swing.JButton();
        VoltarListConv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        TabelaP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Cpf", "Nascimento", "Sexo", "Cidade", "UF", "Cep"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabelaP);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 110, 670, 400);

        BttEditar.setText("EDITAR");
        BttEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttEditarActionPerformed(evt);
            }
        });
        getContentPane().add(BttEditar);
        BttEditar.setBounds(50, 540, 135, 45);

        BttSalvar.setText("SALVAR");
        BttSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(BttSalvar);
        BttSalvar.setBounds(190, 540, 133, 45);

        BttExcluir.setText("EXCLUIR");
        BttExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(BttExcluir);
        BttExcluir.setBounds(330, 540, 135, 46);

        VoltarListConv.setText("Voltar");
        VoltarListConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarListConvActionPerformed(evt);
            }
        });
        getContentPane().add(VoltarListConv);
        VoltarListConv.setBounds(55, 80, 70, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
private void carregarDados() {
    String url = "jdbc:mysql://localhost:3306/gerenciar_paciente";
    String user = "root";
    String password = "root";

    String[] colunas = {"id","nome", "cpf", "nascimento",
        "sexo","cidade", "uf", "cep"};
    DefaultTableModel tableModel = new DefaultTableModel(colunas, 0);

    String sql = "SELECT id,nome,cpf,nascimento,sexo,cidade,uf,cep FROM paciente";

    try (Connection connection = DriverManager.getConnection(url, user, password);
         Statement statement = connection.createStatement();
         ResultSet resultSet = statement.executeQuery(sql)) {

        while (resultSet.next()) {
            Object[] linha = {
                resultSet.getString("nome"),
                resultSet.getString("cpf"),
                resultSet.getDate("nascimento"),
                resultSet.getString("sexo"),
                resultSet.getString("cidade"),
                resultSet.getString("uf"),
                resultSet.getString("cep"),
            };
            tableModel.addRow(linha);
        }

        TabelaP.setModel(tableModel);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage(),
                "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void BttEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttEditarActionPerformed
     // Obter a linha selecionada
    int selectedRow = TabelaP.getSelectedRow();

    if (selectedRow != -1) { // Verifica se uma linha foi selecionada
        // Permite edição diretamente na linha selecionada
        TabelaP.editCellAt(selectedRow, 0);
        TabelaP.editCellAt(selectedRow, 1);
        TabelaP.editCellAt(selectedRow, 2);
        TabelaP.editCellAt(selectedRow, 3);
        TabelaP.editCellAt(selectedRow, 4);
        TabelaP.editCellAt(selectedRow, 5);
        TabelaP.editCellAt(selectedRow, 6);
        TabelaP.editCellAt(selectedRow, 7);

        JOptionPane.showMessageDialog(this, "Você pode editar diretamente na tabela."
                + " Clique em SALVAR para confirmar as alterações.");
    } else {
        JOptionPane.showMessageDialog(this, "Selecione uma linha para editar.",
                "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BttEditarActionPerformed

    private void VoltarListConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarListConvActionPerformed
        // TODO add your handling code here:
        TelaLobby telaLobby = new TelaLobby(); // Instancia a próxima tela
        telaLobby.setVisible(true); // Exibe a nova tela
        this.dispose(); // Fecha a tela atual (TelaLogin)
    }//GEN-LAST:event_VoltarListConvActionPerformed

    private void BttSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttSalvarActionPerformed
 // Obter a linha selecionada
    int selectedRow = TabelaP.getSelectedRow(); 

    if (selectedRow != -1) { // Verifica se uma linha foi selecionada
    // Obter a linha selecionada

    if (selectedRow != -1) { // Verifica se uma linha foi selecionada
        try {
            // Obter os valores da linha selecionada
            int id = Integer.parseInt(TabelaP.getValueAt(selectedRow, 0).toString());
            String nome = TabelaP.getValueAt(selectedRow, 1).toString();
            String cpf = TabelaP.getValueAt(selectedRow, 2).toString();
            String nascimento = TabelaP.getValueAt(selectedRow, 3).toString();
            String sexo = TabelaP.getValueAt(selectedRow, 4).toString();
            String cidade = TabelaP.getValueAt(selectedRow, 5).toString();
            String uf = TabelaP.getValueAt(selectedRow, 6).toString();
            String cep = TabelaP.getValueAt(selectedRow, 7).toString();

            // Configuração do banco de dados
            String url = "jdbc:mysql://localhost:3306/gerenciar_paciente";
            String user = "root";
            String password = "root";

            // SQL para atualizar o registro no banco
            String sql = "UPDATE paciente SET nome = ?, cpf = ?,"
                    + " nascimento = ?, sexo = ?, cidade = ?, uf = ?, "
                    + "cep = ? WHERE id = ?";

            try (Connection connection = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = connection.prepareStatement(sql)) {

                // Configurar os parâmetros no PreparedStatement
                stmt.setString(1, nome);
                stmt.setString(2, cpf);
                stmt.setString(3, nascimento);
                stmt.setString(4, sexo);
                stmt.setString(5, cidade);
                stmt.setString(6, uf);
                stmt.setString(7, cep);
   
                // Executar a atualização
                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(this, "Nenhuma alteração foi feita.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar o banco de dados: " + e.getMessage(),
                                          "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro ao processar os dados: " + e.getMessage(),
                                          "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, 
                "Selecione uma linha para salvar as alterações.",
                "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_BttSalvarActionPerformed

    private void BttExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttExcluirActionPerformed
        // TODO add your handling code here:
            int selectedRow = TabelaP.getSelectedRow();
            if (selectedRow != -1) { // Verifica se uma linha foi selecionada
        // Obter o código do convênio (chave única)
        int codigoConvenio = Integer.parseInt(TabelaP.getValueAt(selectedRow, 1).toString());

        // Exibir mensagem de confirmação
        int confirm = JOptionPane.showConfirmDialog(this,
                "Deseja realmente excluir este Paciente?",
                "Confirmação",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Configuração do banco de dados
            String url = "jdbc:mysql://localhost:3306/gerenciar_paciente";
            String user = "root";
            String password = "root";

            // SQL para excluir o registro no banco
            String sql = "DELETE FROM paciente WHERE id = ?";

            try (Connection connection = DriverManager.getConnection(url, user, password);
                 PreparedStatement stmt = connection.prepareStatement(sql)) {

                // Configurar o código do convênio no PreparedStatement
                stmt.setInt(1, codigoConvenio);

                // Executar a exclusão
                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Paciente excluído com sucesso!");

                    // Remover a linha da tabela na interface
                    ((DefaultTableModel) TabelaP.getModel()).removeRow(selectedRow);
                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível excluir o paciente.",
                                                  "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir do banco de dados: "+ e.getMessage(),
                                              "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_BttExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListagemPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BttEditar;
    private javax.swing.JButton BttExcluir;
    private javax.swing.JButton BttSalvar;
    private javax.swing.JTable TabelaP;
    private javax.swing.JButton VoltarListConv;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
