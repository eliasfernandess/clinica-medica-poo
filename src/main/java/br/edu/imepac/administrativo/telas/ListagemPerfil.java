/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.imepac.administrativo.telas;


import br.edu.imepac.administrativo.daos.PerfilDAO;
import br.edu.imepac.administrativo.entidades.Perfil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elias
 */
public class ListagemPerfil extends javax.swing.JFrame {

    /**
     * Creates new form ListagemConvenio
     */
    public ListagemPerfil() {
    initComponents(); // Inicializa os componentes da interface
    setLocationRelativeTo(null);
    carregarDados(); // Carrega os dados no início
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablePerfil = new javax.swing.JTable();
        BttEditar = new javax.swing.JButton();
        BttExcluir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        BotãoVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(499, 700));
        setMinimumSize(new java.awt.Dimension(499, 700));
        setPreferredSize(new java.awt.Dimension(499, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        TablePerfil.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TablePerfil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome do Pefil"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablePerfil);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 110, 420, 400);

        BttEditar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BttEditar.setText("EDITAR");
        BttEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttEditarActionPerformed(evt);
            }
        });
        getContentPane().add(BttEditar);
        BttEditar.setBounds(40, 540, 135, 60);

        BttExcluir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BttExcluir.setText("EXCLUIR");
        BttExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(BttExcluir);
        BttExcluir.setBounds(190, 540, 135, 60);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 73, 500, 10);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("LISTAGEM PERFIL");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 20, 270, 32);

        BotãoVoltar.setBackground(new java.awt.Color(255, 153, 153));
        BotãoVoltar.setText("Voltar");
        BotãoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotãoVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(BotãoVoltar);
        BotãoVoltar.setBounds(330, 20, 90, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
     private void carregarDados() {
        PerfilDAO perfilDAO = new PerfilDAO(); // Instância da DAO
        String[] colunas = { "ID", "Nome do Perfil" }; // Colunas da tabela
        DefaultTableModel tableModel = new DefaultTableModel(colunas, 0); // Modelo da tabela

        try {
            // Obtemos a lista de perfis usando a DAO
            List<Perfil> perfis = perfilDAO.readAll();

            // Iteramos sobre a lista de perfis para adicionar ao modelo da tabela
            for (Perfil perfil : perfis) {
                Object[] linha = { perfil.getId(), perfil.getNome() };
                tableModel.addRow(linha); // Adiciona a linha ao modelo
            }

            TablePerfil.setModel(tableModel); // Define o modelo na tabela
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void BttEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttEditarActionPerformed
  int selectedRow = TablePerfil.getSelectedRow(); // Linha selecionada na tabela
        if (selectedRow != -1) {
            try {
                // Obtém o ID e o nome do perfil selecionado
                Long id = Long.valueOf(TablePerfil.getValueAt(selectedRow, 0).toString());

                String nomePerfil = TablePerfil.getValueAt(selectedRow, 1).toString();

                // Redireciona para a tela de edição
                EditarPerfil editarPerfil = new EditarPerfil();
                editarPerfil.preencherDados(id, nomePerfil); // Preenche os dados na tela de edição
                editarPerfil.setVisible(true);
                this.dispose(); // Fecha a tela atual
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro ao abrir a tela de edição: " + e.getMessage(),
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar.", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BttEditarActionPerformed

    private void BttExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttExcluirActionPerformed
        int selectedRow = TablePerfil.getSelectedRow(); // Obtém a linha selecionada
    if (selectedRow != -1) { // Verifica se há uma linha selecionada
        // Obtém o ID do perfil da linha selecionada
        Long id = Long.valueOf(TablePerfil.getValueAt(selectedRow, 0).toString());

        // Solicita confirmação do usuário
        int confirm = JOptionPane.showConfirmDialog(this, 
                "Deseja realmente excluir este Perfil?", 
                "Confirmação", 
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) { // Se o usuário confirmar
            try {
                // Chama o método de exclusão da DAO
                PerfilDAO perfilDAO = new PerfilDAO();
                perfilDAO.delete(id); // Exclui o perfil pelo ID

                // Remove a linha do modelo da tabela
                ((DefaultTableModel) TablePerfil.getModel()).removeRow(selectedRow);

                // Mensagem de sucesso
                JOptionPane.showMessageDialog(this, "Perfil excluído com sucesso!");
            } catch (SQLException e) {
                // Exibe mensagem de erro
                JOptionPane.showMessageDialog(this, 
                        "Erro ao excluir o perfil: " + e.getMessage(), 
                        "Erro", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // Exibe mensagem se nenhuma linha for selecionada
        JOptionPane.showMessageDialog(this, 
                "Selecione uma linha para excluir.", 
                "Aviso", 
                JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_BttExcluirActionPerformed

    private void BotãoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotãoVoltarActionPerformed
        // TODO add your handling code here:
        TelaLobby telaLobby = new TelaLobby(); // Instancia a próxima tela
        telaLobby.setVisible(true); // Exibe a nova tela
        this.dispose(); // Fecha a tela atual (TelaLogin)
    }//GEN-LAST:event_BotãoVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new ListagemPerfil().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotãoVoltar;
    private javax.swing.JButton BttEditar;
    private javax.swing.JButton BttExcluir;
    private javax.swing.JTable TablePerfil;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
