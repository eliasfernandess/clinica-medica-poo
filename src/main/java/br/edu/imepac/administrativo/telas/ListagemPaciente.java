package br.edu.imepac.administrativo.telas;

import br.edu.imepac.administrativo.daos.PacienteDAO;
import br.edu.imepac.administrativo.entidades.Paciente;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elias
 */
public class ListagemPaciente extends javax.swing.JFrame {

    /**
     * Creates new form ListagemPaciente
     */
    public ListagemPaciente() {
        initComponents();
        carregarPacientes(); // Carregar os pacientes ao iniciar
        setLocationRelativeTo(null);
        
                this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowActivated(java.awt.event.WindowEvent evt) {
                carregarPacientes();
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BttEditar = new javax.swing.JButton();
        BttExcluir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        BotãoVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(557, 666));
        setMinimumSize(new java.awt.Dimension(557, 666));
        setPreferredSize(new java.awt.Dimension(557, 666));
        setResizable(false);
        getContentPane().setLayout(null);

        BttEditar.setBackground(new java.awt.Color(255, 255, 153));
        BttEditar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BttEditar.setText("EDITAR");
        BttEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttEditarActionPerformed(evt);
            }
        });
        getContentPane().add(BttEditar);
        BttEditar.setBounds(50, 550, 210, 60);

        BttExcluir.setBackground(new java.awt.Color(255, 153, 153));
        BttExcluir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BttExcluir.setText("EXCLUIR");
        BttExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BttExcluirActionPerformed(evt);
            }
        });
        getContentPane().add(BttExcluir);
        BttExcluir.setBounds(290, 550, 210, 60);

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Idade", "E-mail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(50, 120, 452, 402);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 80, 1210, 3);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("LISTAGEM PACIENTES");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 30, 260, 32);

        BotãoVoltar.setBackground(new java.awt.Color(255, 153, 153));
        BotãoVoltar.setText("Voltar");
        BotãoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotãoVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(BotãoVoltar);
        BotãoVoltar.setBounds(390, 30, 90, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    public void adicionarPaciente(Paciente paciente) {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.addRow(new Object[]{
    paciente.getNome(),       // Nome
    paciente.getIdade(),      // Idade
    paciente.getEmail()       // E-mail
});
}

    
private void carregarPacientes() {
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
    tableModel.setRowCount(0); // Limpa os dados existentes na tabela

    try {
        // Instancia o DAO e busca todos os pacientes
        PacienteDAO pacienteDAO = new PacienteDAO();
        List<Paciente> pacientes = pacienteDAO.readAll();

        // Itera sobre a lista de pacientes e preenche a tabela
        for (Paciente paciente : pacientes) {
            tableModel.addRow(new Object[]{
                paciente.getId(),                       // Coluna 1: ID
                paciente.getNome() != null ? paciente.getNome() : "",         // Coluna 2: Nome
                paciente.getIdade(),                    // Coluna 3: Idade
                paciente.getContato() != null ? paciente.getContato() : "-",  // Coluna 4: Contato (evita null)
                paciente.getEmail() != null ? paciente.getEmail() : "-"       // Coluna 5: E-mail (evita null)
            });
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
                "Erro ao carregar pacientes: " + e.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        // Captura qualquer outro erro inesperado
        JOptionPane.showMessageDialog(this, 
                "Ocorreu um erro inesperado ao carregar os pacientes: " + e.getMessage(), 
                "Erro", JOptionPane.ERROR_MESSAGE);
    }
}


    
    private void BttEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttEditarActionPerformed
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        try {
            Long id = Long.valueOf(jTable1.getValueAt(selectedRow, 0).toString());
            PacienteDAO pacienteDAO = new PacienteDAO();
            Paciente paciente = pacienteDAO.readById(id);

            if (paciente != null) {
                EditarPaciente editarPaciente = new EditarPaciente(paciente);
                editarPaciente.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Paciente não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar paciente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um paciente para editar.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_BttEditarActionPerformed

    private void BttExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BttExcluirActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este paciente?",
                    "Confirmação", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Long id = Long.valueOf(jTable1.getValueAt(selectedRow, 0).toString());

                    PacienteDAO pacienteDAO = new PacienteDAO();
                    pacienteDAO.delete(id);

                    carregarPacientes();
                    JOptionPane.showMessageDialog(this, "Paciente excluído com sucesso!");
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir paciente: " + e.getMessage(),
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um paciente para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BttExcluirActionPerformed

    private void BotãoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotãoVoltarActionPerformed
        // TODO add your handling code here:
        TelaLobby telaLobby = new TelaLobby(); // Instancia a próxima tela
        telaLobby.setVisible(true); // Exibe a nova tela
        this.dispose(); // Fecha a tela atual (TelaLogin)
    }//GEN-LAST:event_BotãoVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListagemPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListagemPaciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotãoVoltar;
    private javax.swing.JButton BttEditar;
    private javax.swing.JButton BttExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
